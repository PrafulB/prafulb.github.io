{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/insertAdjacentHTML/","result":{"data":{"site":{"siteMetadata":{"name":"Praphulla Bhawsar","title":"Praphulla Bhawsar","description":"AI Engineer | PhD Student | Geekus Maximus","about":null,"author":null,"github":"https://github.com/prafulb","linkedin":"https://www.linkedin.com/in/PrafulB/","resume":"Praphulla Bhawsar CV.pdf"}},"markdownRemark":{"id":"fbe75119-49f9-5198-9afc-ea275fad666b","excerpt":"If you wanted to nest a div inside another using JS, you might perhaps do this: The seasoned developer will see the flaw here immediately. I didn‚Äôt. If you try‚Ä¶","html":"<p>If you wanted to nest a div inside another using JS, you might perhaps do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">div1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>‚Äúdiv‚Äù<span class=\"token punctuation\">)</span>\ndiv1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"div1\"</span>\ndiv2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>‚Äúdiv‚Äù<span class=\"token punctuation\">)</span>\ndiv2<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"div2\"</span>\ndiv2<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span>log\ndiv1<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>div2<span class=\"token punctuation\">.</span>outerHTML<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n  &lt;p>End of div1&lt;/p>\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>The seasoned developer will see the flaw here immediately. I didn‚Äôt. If you try <code class=\"language-text\">div1.querySelector(\"#div2\").click()</code> now, you‚Äôll find that <code class=\"language-text\">div2</code> has no <code class=\"language-text\">onclick</code> handler any more!! Turns out the <code class=\"language-text\">onclick</code> is not kept when you do <code class=\"language-text\">div2.outerHTML</code> because onclick is not set as an attribute on <code class=\"language-text\">div2</code>. Fair enough, pretty obvious in retrospect.</p>\n<p>So then one might try the straightforward <code class=\"language-text\">appendChild()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">div1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>‚Äúdiv‚Äù<span class=\"token punctuation\">)</span>\ndiv2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>‚Äúdiv‚Äù<span class=\"token punctuation\">)</span>\ndiv2<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span>log\ndiv1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div2<span class=\"token punctuation\">)</span>\ndiv1<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token string\">\"&lt;p>End of div1&lt;/p>\"</span></code></pre></div>\n<p>Amazingly, this doesn‚Äôt keep the <code class=\"language-text\">onclick</code> either, and what‚Äôs perhaps even more incredible is that if we remove the last line where we add to <code class=\"language-text\">div1</code>‚Äôs <code class=\"language-text\">innerHTML</code>, everything works exactly as expected! Any time you do a **+= ** with <code class=\"language-text\">element.innerHTML</code>, it basically corrupts the DOM at that element‚Äôs level and destroys all event handlers for all its children! Some details are here, although there is surprisingly very little documentation on this issue:  <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Replacing_the_contents_of_an_element\">https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Replacing_the_contents_of_an_element</a> .</p>\n<p>The solutions then. One might be to do:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">div2<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onclick\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"console.log(this)\"</span><span class=\"token punctuation\">)</span>\ndiv1<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>div2<span class=\"token punctuation\">.</span>outerHTML<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n  &lt;p>End of div1&lt;/p>\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>This does work, but depending on how large your click handler is, it might be undesirable because we are basically polluting our HTML with the handler code. Next we could try the more verbose:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">div2<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span>log\np <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">\"End of div1\"</span>\ndiv1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div2<span class=\"token punctuation\">)</span>\ndiv1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This fixes it as well, and was the first thing I tried, but depending on how many such extra elements we have and how complex they are (number of attributes etc.), it might be tedious to do <code class=\"language-text\">createElement()</code> and <code class=\"language-text\">appendChild()</code> for all of them. </p>\n<p>So now we come to what is unquestionably the best solution to this issue. I introduce to you: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML\">insertAdjacentHTML()</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">div2<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span>log\ndiv1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div2<span class=\"token punctuation\">)</span>\ndiv1<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beforeend\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;p>End of div1&lt;/p>\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It basically gives us the best of both worlds, allowing the addition of text as HTML without corrupting the DOM like stupid <code class=\"language-text\">innerHTML</code> does. I‚Äôm definitely replacing all my <code class=\"language-text\">innerHTML</code>s with this immediately. Recommend you do the same to avoid migraines like mine!ü§Ø</p>","frontmatter":{"title":"insertAdjacentHTML >>>> innerHTML","date":"January 10, 2021","description":"<element>.insertAdjacentHTML() is objectively superior, period."}}},"pageContext":{"slug":"/blog/insertAdjacentHTML/","previous":null,"next":{"fields":{"slug":"/blog/ImageBox3/"},"frontmatter":{"title":"ImageBox3: The No-Server Whole Slide Image Tile Server"}}}},"staticQueryHashes":["63159454"]}